************* Module board
F:  1, 0: error while code parsing: compile() expected string without null bytes (parse-error)
************* Module donkeykong
C:  4, 0: Invalid constant name "b" (invalid-name)
************* Module donkey
C: 34, 8: Invalid attribute name "Fireballs" (invalid-name)
C: 13, 8: Invalid variable name "Direction" (invalid-name)
E: 19, 4: An attribute defined in donkey line 35 hides this method (method-hidden)
E: 23, 4: An attribute defined in donkey line 36 hides this method (method-hidden)
C: 27, 4: Invalid method name "addTime" (invalid-name)
W: 31, 4: Dangerous default value [] as argument (dangerous-default-value)
R: 31, 4: Too many arguments (6/5) (too-many-arguments)
C: 34, 8: Invalid attribute name "Fireballs" (invalid-name)
C: 13, 8: Invalid variable name "Direction" (invalid-name)
E: 19, 4: An attribute defined in donkey line 35 hides this method (method-hidden)
E: 23, 4: An attribute defined in donkey line 36 hides this method (method-hidden)
C: 27, 4: Invalid method name "addTime" (invalid-name)
W: 31, 4: Dangerous default value [] as argument (dangerous-default-value)
R: 31, 4: Too many arguments (6/5) (too-many-arguments)
************* Module fireball
C: 10, 8: Invalid attribute name "posX" (invalid-name)
C: 11, 8: Invalid attribute name "posY" (invalid-name)
C:  5, 0: Old-style class defined. (old-style-class)
W:  9,29: Redefining built-in 'dir' (redefined-builtin)
C:  9, 4: Invalid argument name "x" (invalid-name)
C:  9, 4: Invalid argument name "y" (invalid-name)
C: 14, 4: Invalid method name "setPos" (invalid-name)
C: 14, 4: Invalid argument name "X" (invalid-name)
C: 14, 4: Invalid argument name "Y" (invalid-name)
C: 19, 4: Invalid method name "changeDir" (invalid-name)
W:  2, 0: Unused Person imported from person (unused-import)
C: 10, 8: Invalid attribute name "posX" (invalid-name)
C: 11, 8: Invalid attribute name "posY" (invalid-name)
C:  5, 0: Old-style class defined. (old-style-class)
W:  9,29: Redefining built-in 'dir' (redefined-builtin)
C:  9, 4: Invalid argument name "x" (invalid-name)
C:  9, 4: Invalid argument name "y" (invalid-name)
C: 14, 4: Invalid method name "setPos" (invalid-name)
C: 14, 4: Invalid argument name "X" (invalid-name)
C: 14, 4: Invalid argument name "Y" (invalid-name)
C: 19, 4: Invalid method name "changeDir" (invalid-name)
W:  2, 0: Unused Person imported from person (unused-import)
************* Module game
C:226, 0: Line too long (106/100) (line-too-long)
C:307, 0: Line too long (162/100) (line-too-long)
C:389, 0: Line too long (110/100) (line-too-long)
C: 21, 8: Invalid constant name "getch" (invalid-name)
C: 25, 8: Invalid variable name "fd" (invalid-name)
C: 29,12: Invalid variable name "ch" (invalid-name)
C:515, 8: Invalid attribute name "Donkey" (invalid-name)
C:516, 8: Invalid attribute name "Player" (invalid-name)
R: 62, 0: Too many instance attributes (9/7) (too-many-instance-attributes)
C: 66, 4: Invalid method name "checkCoin" (invalid-name)
C: 66, 4: Invalid argument name "x" (invalid-name)
C: 66, 4: Invalid argument name "y" (invalid-name)
C: 72, 4: Invalid method name "checkWall" (invalid-name)
C: 72, 4: Invalid argument name "x" (invalid-name)
C: 72, 4: Invalid argument name "y" (invalid-name)
C: 78, 4: Invalid method name "checkDonkey" (invalid-name)
C: 78, 4: Invalid argument name "x" (invalid-name)
C: 78, 4: Invalid argument name "y" (invalid-name)
C: 84, 4: Invalid method name "checkStair" (invalid-name)
C: 84, 4: Invalid argument name "x" (invalid-name)
C: 84, 4: Invalid argument name "y" (invalid-name)
C: 90, 4: Invalid method name "checkFireball" (invalid-name)
C: 90, 4: Invalid argument name "x" (invalid-name)
C: 90, 4: Invalid argument name "y" (invalid-name)
C: 96, 4: Invalid method name "checkGravity" (invalid-name)
C: 96, 4: Invalid argument name "x" (invalid-name)
C: 96, 4: Invalid argument name "y" (invalid-name)
C:108, 4: Invalid method name "checkPrincess" (invalid-name)
C:108, 4: Invalid argument name "x" (invalid-name)
C:108, 4: Invalid argument name "y" (invalid-name)
C:114, 4: Invalid method name "checkBlocking" (invalid-name)
C:114, 4: Invalid argument name "x" (invalid-name)
C:114, 4: Invalid argument name "y" (invalid-name)
C:120, 4: Invalid method name "checkDeath" (invalid-name)
C:120, 4: Invalid argument name "x" (invalid-name)
C:120, 4: Invalid argument name "y" (invalid-name)
C:124, 4: Invalid method name "checkPlayer" (invalid-name)
C:124, 4: Invalid argument name "x" (invalid-name)
C:124, 4: Invalid argument name "y" (invalid-name)
C:128, 4: Invalid method name "placePlayer" (invalid-name)
C:134, 4: Invalid method name "placeDonkey" (invalid-name)
C:139, 8: Invalid variable name "PLACED" (invalid-name)
C:144,16: Invalid variable name "PLACED" (invalid-name)
C:148, 4: Invalid method name "placePrincess" (invalid-name)
C:153, 8: Invalid variable name "PLACED" (invalid-name)
C:158,16: Invalid variable name "PLACED" (invalid-name)
W:164, 8: Redefining built-in 'set' (redefined-builtin)
C:161, 4: Invalid method name "placeMap" (invalid-name)
C:164, 8: Missing function docstring (missing-docstring)
C:168, 8: Invalid variable name "FLOOR" (invalid-name)
C:176,16: Invalid variable name "FLOOR" (invalid-name)
C:178,16: Invalid variable name "FLOOR" (invalid-name)
C:187,16: Invalid variable name "colX" (invalid-name)
C:188,16: Invalid variable name "colY" (invalid-name)
C:197,16: Invalid variable name "STAIR" (invalid-name)
C:200,20: Invalid variable name "stairPos" (invalid-name)
C:201,20: Invalid variable name "I" (invalid-name)
C:204,24: Invalid variable name "I" (invalid-name)
C:210,24: Invalid variable name "I" (invalid-name)
C:214,28: Invalid variable name "I" (invalid-name)
C:216,24: Invalid variable name "STAIR" (invalid-name)
R:161, 4: Too many branches (15/12) (too-many-branches)
C:218, 4: Invalid method name "placeCoin" (invalid-name)
C:221, 8: Invalid variable name "PLACED" (invalid-name)
C:223,12: Invalid variable name "Floori" (invalid-name)
C:224,12: Invalid variable name "Floorj" (invalid-name)
C:229,16: Invalid variable name "PLACED" (invalid-name)
W:231,27: Redefining name 'Fireball' from outer scope (line 59) (redefined-outer-name)
C:231, 4: Invalid method name "moveFireball" (invalid-name)
C:231, 4: Invalid argument name "Fireball" (invalid-name)
C:234, 8: Invalid variable name "prevX" (invalid-name)
C:235, 8: Invalid variable name "prevY" (invalid-name)
C:237, 8: Invalid variable name "newX" (invalid-name)
C:238, 8: Invalid variable name "newY" (invalid-name)
C:249,16: Invalid variable name "newX" (invalid-name)
C:255,16: Invalid variable name "newX" (invalid-name)
C:259,16: Invalid variable name "newX" (invalid-name)
W:276,12: Redefining name 'Fireball' from outer scope (line 59) (redefined-outer-name)
C:273, 4: Invalid method name "moveFireballs" (invalid-name)
C:273, 4: Invalid argument name "FireballsList" (invalid-name)
C:275, 8: Invalid variable name "L" (invalid-name)
C:276,12: Invalid variable name "Fireball" (invalid-name)
C:282, 4: Invalid method name "movePerson" (invalid-name)
R:282, 4: Method could be a function (no-self-use)
C:293, 4: Invalid method name "moveDonkey" (invalid-name)
C:297,12: Invalid variable name "prevX" (invalid-name)
C:298,12: Invalid variable name "prevY" (invalid-name)
C:301,12: Invalid variable name "PLACED" (invalid-name)
C:303,16: Invalid variable name "L" (invalid-name)
C:306,20: Invalid variable name "L" (invalid-name)
C:308,20: Invalid variable name "PLACED" (invalid-name)
C:321, 4: Invalid method name "movePlayer" (invalid-name)
C:326,16: Invalid variable name "prevX" (invalid-name)
C:327,16: Invalid variable name "prevY" (invalid-name)
C:339, 8: Invalid variable name "prevX" (invalid-name)
C:340, 8: Invalid variable name "prevY" (invalid-name)
C:345,12: Invalid variable name "b" (invalid-name)
C:354,24: Invalid variable name "prevX" (invalid-name)
C:355,24: Invalid variable name "prevY" (invalid-name)
R:321, 4: Too many branches (13/12) (too-many-branches)
C:384, 4: Invalid method name "printBoard" (invalid-name)
W:415,12: Redefining name 'Donkey' from outer scope (line 58) (redefined-outer-name)
C:415,12: Invalid variable name "Donkey" (invalid-name)
C:418, 4: Invalid method name "playerDies" (invalid-name)
C:427, 8: Invalid variable name "prevX" (invalid-name)
C:428, 8: Invalid variable name "prevY" (invalid-name)
C:459,16: Invalid variable name "L" (invalid-name)
C:479, 4: Invalid method name "setMap" (invalid-name)
C:479, 4: Invalid argument name "COIN" (invalid-name)
C:489,12: Invalid variable name "x" (invalid-name)
C:490,12: Invalid variable name "y" (invalid-name)
W:488,12: Unused variable 'i' (unused-variable)
W:510,39: Unused variable 'i' (unused-variable)
W:511,26: Unused variable 'j' (unused-variable)
R: 62, 0: Too many public methods (25/20) (too-many-public-methods)
W: 56, 0: Unused Person imported from person (unused-import)
W: 59, 0: Unused Fireball imported from fireball (unused-import)
C:226, 0: Line too long (106/100) (line-too-long)
C:307, 0: Line too long (162/100) (line-too-long)
C:389, 0: Line too long (110/100) (line-too-long)
C: 21, 8: Invalid constant name "getch" (invalid-name)
C: 25, 8: Invalid variable name "fd" (invalid-name)
C: 29,12: Invalid variable name "ch" (invalid-name)
C:515, 8: Invalid attribute name "Donkey" (invalid-name)
C:516, 8: Invalid attribute name "Player" (invalid-name)
R: 62, 0: Too many instance attributes (9/7) (too-many-instance-attributes)
C: 66, 4: Invalid method name "checkCoin" (invalid-name)
C: 66, 4: Invalid argument name "x" (invalid-name)
C: 66, 4: Invalid argument name "y" (invalid-name)
C: 72, 4: Invalid method name "checkWall" (invalid-name)
C: 72, 4: Invalid argument name "x" (invalid-name)
C: 72, 4: Invalid argument name "y" (invalid-name)
C: 78, 4: Invalid method name "checkDonkey" (invalid-name)
C: 78, 4: Invalid argument name "x" (invalid-name)
C: 78, 4: Invalid argument name "y" (invalid-name)
C: 84, 4: Invalid method name "checkStair" (invalid-name)
C: 84, 4: Invalid argument name "x" (invalid-name)
C: 84, 4: Invalid argument name "y" (invalid-name)
C: 90, 4: Invalid method name "checkFireball" (invalid-name)
C: 90, 4: Invalid argument name "x" (invalid-name)
C: 90, 4: Invalid argument name "y" (invalid-name)
C: 96, 4: Invalid method name "checkGravity" (invalid-name)
C: 96, 4: Invalid argument name "x" (invalid-name)
C: 96, 4: Invalid argument name "y" (invalid-name)
C:108, 4: Invalid method name "checkPrincess" (invalid-name)
C:108, 4: Invalid argument name "x" (invalid-name)
C:108, 4: Invalid argument name "y" (invalid-name)
C:114, 4: Invalid method name "checkBlocking" (invalid-name)
C:114, 4: Invalid argument name "x" (invalid-name)
C:114, 4: Invalid argument name "y" (invalid-name)
C:120, 4: Invalid method name "checkDeath" (invalid-name)
C:120, 4: Invalid argument name "x" (invalid-name)
C:120, 4: Invalid argument name "y" (invalid-name)
C:124, 4: Invalid method name "checkPlayer" (invalid-name)
C:124, 4: Invalid argument name "x" (invalid-name)
C:124, 4: Invalid argument name "y" (invalid-name)
C:128, 4: Invalid method name "placePlayer" (invalid-name)
C:134, 4: Invalid method name "placeDonkey" (invalid-name)
C:139, 8: Invalid variable name "PLACED" (invalid-name)
C:144,16: Invalid variable name "PLACED" (invalid-name)
C:148, 4: Invalid method name "placePrincess" (invalid-name)
C:153, 8: Invalid variable name "PLACED" (invalid-name)
C:158,16: Invalid variable name "PLACED" (invalid-name)
W:164, 8: Redefining built-in 'set' (redefined-builtin)
C:161, 4: Invalid method name "placeMap" (invalid-name)
C:164, 8: Missing function docstring (missing-docstring)
C:168, 8: Invalid variable name "FLOOR" (invalid-name)
C:176,16: Invalid variable name "FLOOR" (invalid-name)
C:178,16: Invalid variable name "FLOOR" (invalid-name)
C:187,16: Invalid variable name "colX" (invalid-name)
C:188,16: Invalid variable name "colY" (invalid-name)
C:197,16: Invalid variable name "STAIR" (invalid-name)
C:200,20: Invalid variable name "stairPos" (invalid-name)
C:201,20: Invalid variable name "I" (invalid-name)
C:204,24: Invalid variable name "I" (invalid-name)
C:210,24: Invalid variable name "I" (invalid-name)
C:214,28: Invalid variable name "I" (invalid-name)
C:216,24: Invalid variable name "STAIR" (invalid-name)
R:161, 4: Too many branches (30/12) (too-many-branches)
C:218, 4: Invalid method name "placeCoin" (invalid-name)
C:221, 8: Invalid variable name "PLACED" (invalid-name)
C:223,12: Invalid variable name "Floori" (invalid-name)
C:224,12: Invalid variable name "Floorj" (invalid-name)
C:229,16: Invalid variable name "PLACED" (invalid-name)
W:231,27: Redefining name 'Fireball' from outer scope (line 59) (redefined-outer-name)
C:231, 4: Invalid method name "moveFireball" (invalid-name)
C:231, 4: Invalid argument name "Fireball" (invalid-name)
C:234, 8: Invalid variable name "prevX" (invalid-name)
C:235, 8: Invalid variable name "prevY" (invalid-name)
C:237, 8: Invalid variable name "newX" (invalid-name)
C:238, 8: Invalid variable name "newY" (invalid-name)
C:249,16: Invalid variable name "newX" (invalid-name)
C:255,16: Invalid variable name "newX" (invalid-name)
C:259,16: Invalid variable name "newX" (invalid-name)
R:231, 4: Too many branches (22/12) (too-many-branches)
W:276,12: Redefining name 'Fireball' from outer scope (line 59) (redefined-outer-name)
C:273, 4: Invalid method name "moveFireballs" (invalid-name)
C:273, 4: Invalid argument name "FireballsList" (invalid-name)
C:275, 8: Invalid variable name "L" (invalid-name)
C:276,12: Invalid variable name "Fireball" (invalid-name)
C:282, 4: Invalid method name "movePerson" (invalid-name)
R:282, 4: Method could be a function (no-self-use)
C:293, 4: Invalid method name "moveDonkey" (invalid-name)
C:297,12: Invalid variable name "prevX" (invalid-name)
C:298,12: Invalid variable name "prevY" (invalid-name)
C:301,12: Invalid variable name "PLACED" (invalid-name)
C:303,16: Invalid variable name "L" (invalid-name)
C:306,20: Invalid variable name "L" (invalid-name)
C:308,20: Invalid variable name "PLACED" (invalid-name)
C:321, 4: Invalid method name "movePlayer" (invalid-name)
C:326,16: Invalid variable name "prevX" (invalid-name)
C:327,16: Invalid variable name "prevY" (invalid-name)
C:339, 8: Invalid variable name "prevX" (invalid-name)
C:340, 8: Invalid variable name "prevY" (invalid-name)
C:345,12: Invalid variable name "b" (invalid-name)
C:354,24: Invalid variable name "prevX" (invalid-name)
C:355,24: Invalid variable name "prevY" (invalid-name)
R:321, 4: Too many branches (26/12) (too-many-branches)
C:384, 4: Invalid method name "printBoard" (invalid-name)
R:384, 4: Too many branches (20/12) (too-many-branches)
W:415,12: Redefining name 'Donkey' from outer scope (line 58) (redefined-outer-name)
C:415,12: Invalid variable name "Donkey" (invalid-name)
C:418, 4: Invalid method name "playerDies" (invalid-name)
C:427, 8: Invalid variable name "prevX" (invalid-name)
C:428, 8: Invalid variable name "prevY" (invalid-name)
C:459,16: Invalid variable name "L" (invalid-name)
R:439, 4: Too many branches (16/12) (too-many-branches)
C:479, 4: Invalid method name "setMap" (invalid-name)
C:479, 4: Invalid argument name "COIN" (invalid-name)
C:489,12: Invalid variable name "x" (invalid-name)
C:490,12: Invalid variable name "y" (invalid-name)
W:488,12: Unused variable 'i' (unused-variable)
W:510,39: Unused variable 'i' (unused-variable)
W:511,26: Unused variable 'j' (unused-variable)
R: 62, 0: Too many public methods (25/20) (too-many-public-methods)
W: 56, 0: Unused Person imported from person (unused-import)
W: 59, 0: Unused Fireball imported from fireball (unused-import)
************* Module main
C:328, 0: Line too long (106/100) (line-too-long)
C:409, 0: Line too long (162/100) (line-too-long)
C:491, 0: Line too long (110/100) (line-too-long)
C: 17, 8: Invalid constant name "getch" (invalid-name)
C: 21, 8: Invalid variable name "fd" (invalid-name)
C: 25,12: Invalid variable name "ch" (invalid-name)
C: 57, 8: Invalid attribute name "posX" (invalid-name)
C: 58, 8: Invalid attribute name "posY" (invalid-name)
C: 60, 4: Invalid method name "moveUp" (invalid-name)
C: 64, 4: Invalid method name "moveDown" (invalid-name)
C: 68, 4: Invalid method name "moveLeft" (invalid-name)
C: 72, 4: Invalid method name "moveRight" (invalid-name)
C: 76, 4: Invalid method name "setPos" (invalid-name)
C: 76, 4: Invalid argument name "x" (invalid-name)
C: 76, 4: Invalid argument name "y" (invalid-name)
C: 81, 4: Invalid method name "getPosition" (invalid-name)
E: 83,16: Instance of 'Person' has no 'x' member (no-member)
E: 83,24: Instance of 'Person' has no 'y' member (no-member)
C:103, 4: Invalid method name "isAlive" (invalid-name)
C:107, 4: Invalid method name "gotCoin" (invalid-name)
C:140, 8: Invalid attribute name "Fireballs" (invalid-name)
C:119, 8: Invalid variable name "Direction" (invalid-name)
W:117,19: Unused argument 'board' (unused-argument)
E:125, 4: An attribute defined in main line 141 hides this method (method-hidden)
E:129, 4: An attribute defined in main line 142 hides this method (method-hidden)
C:133, 4: Invalid method name "addTime" (invalid-name)
W:137, 4: Dangerous default value [] as argument (dangerous-default-value)
R:137, 4: Too many arguments (6/5) (too-many-arguments)
C:150, 8: Invalid attribute name "posX" (invalid-name)
C:151, 8: Invalid attribute name "posY" (invalid-name)
C:145, 0: Old-style class defined. (old-style-class)
W:149,29: Redefining built-in 'dir' (redefined-builtin)
C:149, 4: Invalid argument name "x" (invalid-name)
C:149, 4: Invalid argument name "y" (invalid-name)
C:154, 4: Invalid method name "setPos" (invalid-name)
C:154, 4: Invalid argument name "X" (invalid-name)
C:154, 4: Invalid argument name "Y" (invalid-name)
C:159, 4: Invalid method name "changeDir" (invalid-name)
C:617, 8: Invalid attribute name "Donkey" (invalid-name)
C:618, 8: Invalid attribute name "Player" (invalid-name)
R:164, 0: Too many instance attributes (9/7) (too-many-instance-attributes)
C:168, 4: Invalid method name "checkCoin" (invalid-name)
C:168, 4: Invalid argument name "x" (invalid-name)
C:168, 4: Invalid argument name "y" (invalid-name)
C:174, 4: Invalid method name "checkWall" (invalid-name)
C:174, 4: Invalid argument name "x" (invalid-name)
C:174, 4: Invalid argument name "y" (invalid-name)
C:180, 4: Invalid method name "checkDonkey" (invalid-name)
C:180, 4: Invalid argument name "x" (invalid-name)
C:180, 4: Invalid argument name "y" (invalid-name)
C:186, 4: Invalid method name "checkStair" (invalid-name)
C:186, 4: Invalid argument name "x" (invalid-name)
C:186, 4: Invalid argument name "y" (invalid-name)
C:192, 4: Invalid method name "checkFireball" (invalid-name)
C:192, 4: Invalid argument name "x" (invalid-name)
C:192, 4: Invalid argument name "y" (invalid-name)
C:198, 4: Invalid method name "checkGravity" (invalid-name)
C:198, 4: Invalid argument name "x" (invalid-name)
C:198, 4: Invalid argument name "y" (invalid-name)
C:210, 4: Invalid method name "checkPrincess" (invalid-name)
C:210, 4: Invalid argument name "x" (invalid-name)
C:210, 4: Invalid argument name "y" (invalid-name)
C:216, 4: Invalid method name "checkBlocking" (invalid-name)
C:216, 4: Invalid argument name "x" (invalid-name)
C:216, 4: Invalid argument name "y" (invalid-name)
C:222, 4: Invalid method name "checkDeath" (invalid-name)
C:222, 4: Invalid argument name "x" (invalid-name)
C:222, 4: Invalid argument name "y" (invalid-name)
C:226, 4: Invalid method name "checkPlayer" (invalid-name)
C:226, 4: Invalid argument name "x" (invalid-name)
C:226, 4: Invalid argument name "y" (invalid-name)
C:230, 4: Invalid method name "placePlayer" (invalid-name)
C:236, 4: Invalid method name "placeDonkey" (invalid-name)
C:241, 8: Invalid variable name "PLACED" (invalid-name)
C:246,16: Invalid variable name "PLACED" (invalid-name)
C:250, 4: Invalid method name "placePrincess" (invalid-name)
C:255, 8: Invalid variable name "PLACED" (invalid-name)
C:260,16: Invalid variable name "PLACED" (invalid-name)
W:266, 8: Redefining built-in 'set' (redefined-builtin)
C:263, 4: Invalid method name "placeMap" (invalid-name)
C:266, 8: Missing function docstring (missing-docstring)
C:270, 8: Invalid variable name "FLOOR" (invalid-name)
C:278,16: Invalid variable name "FLOOR" (invalid-name)
C:280,16: Invalid variable name "FLOOR" (invalid-name)
C:289,16: Invalid variable name "colX" (invalid-name)
C:290,16: Invalid variable name "colY" (invalid-name)
C:299,16: Invalid variable name "STAIR" (invalid-name)
C:302,20: Invalid variable name "stairPos" (invalid-name)
C:303,20: Invalid variable name "I" (invalid-name)
C:306,24: Invalid variable name "I" (invalid-name)
C:312,24: Invalid variable name "I" (invalid-name)
C:316,28: Invalid variable name "I" (invalid-name)
C:318,24: Invalid variable name "STAIR" (invalid-name)
R:263, 4: Too many branches (15/12) (too-many-branches)
C:320, 4: Invalid method name "placeCoin" (invalid-name)
C:323, 8: Invalid variable name "PLACED" (invalid-name)
C:325,12: Invalid variable name "Floori" (invalid-name)
C:326,12: Invalid variable name "Floorj" (invalid-name)
C:331,16: Invalid variable name "PLACED" (invalid-name)
W:333,27: Redefining name 'Fireball' from outer scope (line 145) (redefined-outer-name)
C:333, 4: Invalid method name "moveFireball" (invalid-name)
C:333, 4: Invalid argument name "Fireball" (invalid-name)
C:336, 8: Invalid variable name "prevX" (invalid-name)
C:337, 8: Invalid variable name "prevY" (invalid-name)
C:339, 8: Invalid variable name "newX" (invalid-name)
C:340, 8: Invalid variable name "newY" (invalid-name)
C:351,16: Invalid variable name "newX" (invalid-name)
C:357,16: Invalid variable name "newX" (invalid-name)
C:361,16: Invalid variable name "newX" (invalid-name)
W:378,12: Redefining name 'Fireball' from outer scope (line 145) (redefined-outer-name)
C:375, 4: Invalid method name "moveFireballs" (invalid-name)
C:375, 4: Invalid argument name "FireballsList" (invalid-name)
C:377, 8: Invalid variable name "L" (invalid-name)
C:378,12: Invalid variable name "Fireball" (invalid-name)
C:384, 4: Invalid method name "movePerson" (invalid-name)
R:384, 4: Method could be a function (no-self-use)
C:395, 4: Invalid method name "moveDonkey" (invalid-name)
C:399,12: Invalid variable name "prevX" (invalid-name)
C:400,12: Invalid variable name "prevY" (invalid-name)
C:403,12: Invalid variable name "PLACED" (invalid-name)
C:405,16: Invalid variable name "L" (invalid-name)
C:408,20: Invalid variable name "L" (invalid-name)
C:410,20: Invalid variable name "PLACED" (invalid-name)
W:447,12: Redefining name 'b' from outer scope (line 626) (redefined-outer-name)
C:423, 4: Invalid method name "movePlayer" (invalid-name)
C:428,16: Invalid variable name "prevX" (invalid-name)
C:429,16: Invalid variable name "prevY" (invalid-name)
C:441, 8: Invalid variable name "prevX" (invalid-name)
C:442, 8: Invalid variable name "prevY" (invalid-name)
C:447,12: Invalid variable name "b" (invalid-name)
C:456,24: Invalid variable name "prevX" (invalid-name)
C:457,24: Invalid variable name "prevY" (invalid-name)
R:423, 4: Too many branches (13/12) (too-many-branches)
C:486, 4: Invalid method name "printBoard" (invalid-name)
W:517,12: Redefining name 'Donkey' from outer scope (line 113) (redefined-outer-name)
C:517,12: Invalid variable name "Donkey" (invalid-name)
C:520, 4: Invalid method name "playerDies" (invalid-name)
C:529, 8: Invalid variable name "prevX" (invalid-name)
C:530, 8: Invalid variable name "prevY" (invalid-name)
C:561,16: Invalid variable name "L" (invalid-name)
C:581, 4: Invalid method name "setMap" (invalid-name)
C:581, 4: Invalid argument name "COIN" (invalid-name)
C:591,12: Invalid variable name "x" (invalid-name)
C:592,12: Invalid variable name "y" (invalid-name)
W:590,12: Unused variable 'i' (unused-variable)
W:612,39: Unused variable 'i' (unused-variable)
W:613,26: Unused variable 'j' (unused-variable)
R:164, 0: Too many public methods (25/20) (too-many-public-methods)
C:626, 0: Invalid constant name "b" (invalid-name)
C:328, 0: Line too long (106/100) (line-too-long)
C:409, 0: Line too long (162/100) (line-too-long)
C:491, 0: Line too long (110/100) (line-too-long)
C: 17, 8: Invalid constant name "getch" (invalid-name)
C: 21, 8: Invalid variable name "fd" (invalid-name)
C: 25,12: Invalid variable name "ch" (invalid-name)
C: 57, 8: Invalid attribute name "posX" (invalid-name)
C: 58, 8: Invalid attribute name "posY" (invalid-name)
C: 60, 4: Invalid method name "moveUp" (invalid-name)
C: 64, 4: Invalid method name "moveDown" (invalid-name)
C: 68, 4: Invalid method name "moveLeft" (invalid-name)
C: 72, 4: Invalid method name "moveRight" (invalid-name)
C: 76, 4: Invalid method name "setPos" (invalid-name)
C: 76, 4: Invalid argument name "x" (invalid-name)
C: 76, 4: Invalid argument name "y" (invalid-name)
C: 81, 4: Invalid method name "getPosition" (invalid-name)
E: 83,16: Instance of 'Person' has no 'x' member (no-member)
E: 83,24: Instance of 'Person' has no 'y' member (no-member)
C:103, 4: Invalid method name "isAlive" (invalid-name)
C:107, 4: Invalid method name "gotCoin" (invalid-name)
C:140, 8: Invalid attribute name "Fireballs" (invalid-name)
C:119, 8: Invalid variable name "Direction" (invalid-name)
W:117,19: Unused argument 'board' (unused-argument)
E:125, 4: An attribute defined in main line 141 hides this method (method-hidden)
E:129, 4: An attribute defined in main line 142 hides this method (method-hidden)
C:133, 4: Invalid method name "addTime" (invalid-name)
W:137, 4: Dangerous default value [] as argument (dangerous-default-value)
R:137, 4: Too many arguments (6/5) (too-many-arguments)
C:150, 8: Invalid attribute name "posX" (invalid-name)
C:151, 8: Invalid attribute name "posY" (invalid-name)
C:145, 0: Old-style class defined. (old-style-class)
W:149,29: Redefining built-in 'dir' (redefined-builtin)
C:149, 4: Invalid argument name "x" (invalid-name)
C:149, 4: Invalid argument name "y" (invalid-name)
C:154, 4: Invalid method name "setPos" (invalid-name)
C:154, 4: Invalid argument name "X" (invalid-name)
C:154, 4: Invalid argument name "Y" (invalid-name)
C:159, 4: Invalid method name "changeDir" (invalid-name)
C:617, 8: Invalid attribute name "Donkey" (invalid-name)
C:618, 8: Invalid attribute name "Player" (invalid-name)
R:164, 0: Too many instance attributes (9/7) (too-many-instance-attributes)
C:168, 4: Invalid method name "checkCoin" (invalid-name)
C:168, 4: Invalid argument name "x" (invalid-name)
C:168, 4: Invalid argument name "y" (invalid-name)
C:174, 4: Invalid method name "checkWall" (invalid-name)
C:174, 4: Invalid argument name "x" (invalid-name)
C:174, 4: Invalid argument name "y" (invalid-name)
C:180, 4: Invalid method name "checkDonkey" (invalid-name)
C:180, 4: Invalid argument name "x" (invalid-name)
C:180, 4: Invalid argument name "y" (invalid-name)
C:186, 4: Invalid method name "checkStair" (invalid-name)
C:186, 4: Invalid argument name "x" (invalid-name)
C:186, 4: Invalid argument name "y" (invalid-name)
C:192, 4: Invalid method name "checkFireball" (invalid-name)
C:192, 4: Invalid argument name "x" (invalid-name)
C:192, 4: Invalid argument name "y" (invalid-name)
C:198, 4: Invalid method name "checkGravity" (invalid-name)
C:198, 4: Invalid argument name "x" (invalid-name)
C:198, 4: Invalid argument name "y" (invalid-name)
C:210, 4: Invalid method name "checkPrincess" (invalid-name)
C:210, 4: Invalid argument name "x" (invalid-name)
C:210, 4: Invalid argument name "y" (invalid-name)
C:216, 4: Invalid method name "checkBlocking" (invalid-name)
C:216, 4: Invalid argument name "x" (invalid-name)
C:216, 4: Invalid argument name "y" (invalid-name)
C:222, 4: Invalid method name "checkDeath" (invalid-name)
C:222, 4: Invalid argument name "x" (invalid-name)
C:222, 4: Invalid argument name "y" (invalid-name)
C:226, 4: Invalid method name "checkPlayer" (invalid-name)
C:226, 4: Invalid argument name "x" (invalid-name)
C:226, 4: Invalid argument name "y" (invalid-name)
C:230, 4: Invalid method name "placePlayer" (invalid-name)
C:236, 4: Invalid method name "placeDonkey" (invalid-name)
C:241, 8: Invalid variable name "PLACED" (invalid-name)
C:246,16: Invalid variable name "PLACED" (invalid-name)
C:250, 4: Invalid method name "placePrincess" (invalid-name)
C:255, 8: Invalid variable name "PLACED" (invalid-name)
C:260,16: Invalid variable name "PLACED" (invalid-name)
W:266, 8: Redefining built-in 'set' (redefined-builtin)
C:263, 4: Invalid method name "placeMap" (invalid-name)
C:266, 8: Missing function docstring (missing-docstring)
C:270, 8: Invalid variable name "FLOOR" (invalid-name)
C:278,16: Invalid variable name "FLOOR" (invalid-name)
C:280,16: Invalid variable name "FLOOR" (invalid-name)
C:289,16: Invalid variable name "colX" (invalid-name)
C:290,16: Invalid variable name "colY" (invalid-name)
C:299,16: Invalid variable name "STAIR" (invalid-name)
C:302,20: Invalid variable name "stairPos" (invalid-name)
C:303,20: Invalid variable name "I" (invalid-name)
C:306,24: Invalid variable name "I" (invalid-name)
C:312,24: Invalid variable name "I" (invalid-name)
C:316,28: Invalid variable name "I" (invalid-name)
C:318,24: Invalid variable name "STAIR" (invalid-name)
R:263, 4: Too many branches (30/12) (too-many-branches)
C:320, 4: Invalid method name "placeCoin" (invalid-name)
C:323, 8: Invalid variable name "PLACED" (invalid-name)
C:325,12: Invalid variable name "Floori" (invalid-name)
C:326,12: Invalid variable name "Floorj" (invalid-name)
C:331,16: Invalid variable name "PLACED" (invalid-name)
W:333,27: Redefining name 'Fireball' from outer scope (line 145) (redefined-outer-name)
C:333, 4: Invalid method name "moveFireball" (invalid-name)
C:333, 4: Invalid argument name "Fireball" (invalid-name)
C:336, 8: Invalid variable name "prevX" (invalid-name)
C:337, 8: Invalid variable name "prevY" (invalid-name)
C:339, 8: Invalid variable name "newX" (invalid-name)
C:340, 8: Invalid variable name "newY" (invalid-name)
C:351,16: Invalid variable name "newX" (invalid-name)
C:357,16: Invalid variable name "newX" (invalid-name)
C:361,16: Invalid variable name "newX" (invalid-name)
R:333, 4: Too many branches (22/12) (too-many-branches)
W:378,12: Redefining name 'Fireball' from outer scope (line 145) (redefined-outer-name)
C:375, 4: Invalid method name "moveFireballs" (invalid-name)
C:375, 4: Invalid argument name "FireballsList" (invalid-name)
C:377, 8: Invalid variable name "L" (invalid-name)
C:378,12: Invalid variable name "Fireball" (invalid-name)
C:384, 4: Invalid method name "movePerson" (invalid-name)
R:384, 4: Method could be a function (no-self-use)
C:395, 4: Invalid method name "moveDonkey" (invalid-name)
C:399,12: Invalid variable name "prevX" (invalid-name)
C:400,12: Invalid variable name "prevY" (invalid-name)
C:403,12: Invalid variable name "PLACED" (invalid-name)
C:405,16: Invalid variable name "L" (invalid-name)
C:408,20: Invalid variable name "L" (invalid-name)
C:410,20: Invalid variable name "PLACED" (invalid-name)
W:447,12: Redefining name 'b' from outer scope (line 626) (redefined-outer-name)
C:423, 4: Invalid method name "movePlayer" (invalid-name)
C:428,16: Invalid variable name "prevX" (invalid-name)
C:429,16: Invalid variable name "prevY" (invalid-name)
C:441, 8: Invalid variable name "prevX" (invalid-name)
C:442, 8: Invalid variable name "prevY" (invalid-name)
C:447,12: Invalid variable name "b" (invalid-name)
C:456,24: Invalid variable name "prevX" (invalid-name)
C:457,24: Invalid variable name "prevY" (invalid-name)
R:423, 4: Too many branches (26/12) (too-many-branches)
C:486, 4: Invalid method name "printBoard" (invalid-name)
R:486, 4: Too many branches (20/12) (too-many-branches)
W:517,12: Redefining name 'Donkey' from outer scope (line 113) (redefined-outer-name)
C:517,12: Invalid variable name "Donkey" (invalid-name)
C:520, 4: Invalid method name "playerDies" (invalid-name)
C:529, 8: Invalid variable name "prevX" (invalid-name)
C:530, 8: Invalid variable name "prevY" (invalid-name)
C:561,16: Invalid variable name "L" (invalid-name)
R:541, 4: Too many branches (16/12) (too-many-branches)
C:581, 4: Invalid method name "setMap" (invalid-name)
C:581, 4: Invalid argument name "COIN" (invalid-name)
C:591,12: Invalid variable name "x" (invalid-name)
C:592,12: Invalid variable name "y" (invalid-name)
W:590,12: Unused variable 'i' (unused-variable)
W:612,39: Unused variable 'i' (unused-variable)
W:613,26: Unused variable 'j' (unused-variable)
R:164, 0: Too many public methods (25/20) (too-many-public-methods)
C:626, 0: Invalid constant name "b" (invalid-name)
************* Module output
E:  1, 0: invalid syntax (syntax-error)
************* Module person
C:  9, 8: Invalid attribute name "posX" (invalid-name)
C: 10, 8: Invalid attribute name "posY" (invalid-name)
C: 12, 4: Invalid method name "moveUp" (invalid-name)
C: 16, 4: Invalid method name "moveDown" (invalid-name)
C: 20, 4: Invalid method name "moveLeft" (invalid-name)
C: 24, 4: Invalid method name "moveRight" (invalid-name)
C: 28, 4: Invalid method name "setPos" (invalid-name)
C: 28, 4: Invalid argument name "x" (invalid-name)
C: 28, 4: Invalid argument name "y" (invalid-name)
C: 33, 4: Invalid method name "getPosition" (invalid-name)
E: 35,16: Instance of 'Person' has no 'x' member (no-member)
E: 35,24: Instance of 'Person' has no 'y' member (no-member)
C:  9, 8: Invalid attribute name "posX" (invalid-name)
C: 10, 8: Invalid attribute name "posY" (invalid-name)
C: 12, 4: Invalid method name "moveUp" (invalid-name)
C: 16, 4: Invalid method name "moveDown" (invalid-name)
C: 20, 4: Invalid method name "moveLeft" (invalid-name)
C: 24, 4: Invalid method name "moveRight" (invalid-name)
C: 28, 4: Invalid method name "setPos" (invalid-name)
C: 28, 4: Invalid argument name "x" (invalid-name)
C: 28, 4: Invalid argument name "y" (invalid-name)
C: 33, 4: Invalid method name "getPosition" (invalid-name)
E: 35,16: Instance of 'Person' has no 'x' member (no-member)
E: 35,24: Instance of 'Person' has no 'y' member (no-member)
************* Module player
C: 22, 4: Invalid method name "isAlive" (invalid-name)
C: 26, 4: Invalid method name "gotCoin" (invalid-name)
C: 22, 4: Invalid method name "isAlive" (invalid-name)
C: 26, 4: Invalid method name "gotCoin" (invalid-name)
************* Module README
E:  3, 0: invalid syntax (syntax-error)
R:  1, 0: Similar lines in 2 files
==main:2
==main:2
import random
import sys
import os
import time

try:
    import tty
    import termios
except ImportError:
    try:
        import msvcrt
    except ImportError:
        raise ImportError('getch not available')
    else:
        getch = msvcrt.getch
else:
    def getch():
        '''Input'''
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

        return ch

# Globals
ROWS = 30
COLUMNS = 80
VALIDINPUTS = ["w", "a", "s", "d", "q", " "]
PLAYERCHAR = "P"
DONKEYCHAR = "D"
PRINCESSCHAR = "Q"
WALLCHAR = "X"
FIREBALLCHAR = "O"
COINCHAR = "C"
STAIRCHAR = "H"
COINCOUNT = 20
GENERICCHAR = " "
HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'


class Person(object):

    """ Definition of a Person in the Game."""

    def __init__(self, x, y):
        self.posX = x
        self.posY = y

    def moveUp(self):
        '''Move Person Up'''
        self.posX = (self.posX - 1)

    def moveDown(self):
        '''Move Person Down'''
        self.posX = (self.posX + 1)

    def moveLeft(self):
        '''Move Person Left'''
        self.posY = (self.posY - 1)

    def moveRight(self):
        '''Move Person Down'''
        self.posY = (self.posY + 1)

    def setPos(self, x, y):
        '''Set Position of a person'''
        self.posX = x
        self.posY = y

    def getPosition(self):
        '''Get Position of the person'''
        return [self.x, self.y]


class Player(Person):

    ''' Player present in the game '''

    def __init__(self, x, y, score=0, life=3):
        '''Initialise The Player'''
        Person.__init__(self, x, y)
        self.coins = 0
        self.life = life
        self.score = score
        self.alive = True

    def dies(self):
        '''Protocol of when the Player Dies'''
        self.alive = False
        self.score -= 25

    def isAlive(self):
        '''Function To check if player is alive'''
        return self.alive

    def gotCoin(self):
        '''Protocol of when The Player gets a coin'''
        self.coins += 1
        self.score += 5


class Donkey(Person):

    '''Donkey present in the Game '''

    def emit(self, board):
        '''Protocol to emit a new FireBall'''
        Direction = random.randint(0, 1)
        fireball = Fireball(self.posX, self.posY, 1 - 2 * Direction)

        self.Fireballs.append(fireball)
        self.times = 0

    def times(self):
        '''Times of movement after last fireball was fired'''
        return self.times

    def reset(self):
        '''Reset value of firing of fireball'''
        return self.reset

    def addTime(self):
        '''Add one to time'''
        self.times += 1

    def __init__(self, x, y, times=0, reset=15, Fireballs=[]):
        Person.__init__(self, x, y)

        self.Fireballs = Fireballs
        self.times = times
        self.reset = reset


class Fireball():

    '''Fireballs emmited by donkey'''

    def __init__(self, x, y, dir):
        self.posX = x
        self.posY = y
        self.dir = dir

    def setPos(self, X, Y):
        '''Set Position of Fireball'''
        self.posX = X
        self.posY = Y

    def changeDir(self):
        '''Change Direction of movement of Fireball'''
        self.dir *= -1


class Board(object):

    ''' Class for the Actual Board to printed '''

    def checkCoin(self, x, y):
        ''' Checks Coin '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == COINCHAR

    def checkWall(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.orign[x][y] == 1

    def checkDonkey(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == DONKEYCHAR

    def checkStair(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.orign[x][y] == 2

    def checkFireball(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == FIREBALLCHAR

    def checkGravity(self, x, y):
        ''' Checks if it is freefall or not '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False

        if self.checkWall(x + 1, y) or self.checkStair(x, y):
            return True
        elif self.checkWall(x, y) == True and self.checkStair(x + 1, y) == True:
            return True

        return False

    def checkPrincess(self, x, y):
        ''' checks Princess '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == PRINCESSCHAR

    def checkBlocking(self, x, y):
        ''' checks blockage '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return True
        return self.checkWall(x, y) or self.checkDonkey(x, y)

    def checkDeath(self, x, y):
        ''' checks Death '''
        return self.checkFireball(x, y)

    def checkPlayer(self, x, y):
        ''' checks player'''
        return self.Player.posX == x and self.Player.posY == y

    def placePlayer(self, score=0):
        ''' Places Player on the map initially with the score'''

        self.Player = Player(ROWS - 2, 1, score)
        self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR

    def placeDonkey(self):
        ''' Places Donkey on the map initially '''

        donkeyi = self.floor[-2:-1][0] - 1
        donkeyj = 0
        PLACED = False

        while not PLACED:
            donkeyj = random.randint(1, COLUMNS - 1)
            if self.orign[donkeyi][donkeyj] == 0 and self.orign[donkeyi + 1][donkeyj] == 1:
                PLACED = True
                self.board[donkeyi][donkeyj] = DONKEYCHAR
        self.Donkey.append(Donkey(donkeyi, donkeyj))

    def placePrincess(self):
        ''' Places Princess on the map initially '''

        princessi = self.floor[-1:][0] - 1
        princessj = 0
        PLACED = False

        while not PLACED:
            princessj = random.randint(1, COLUMNS - 1)
            if self.orign[princessi][princessj] == 0 and self.orign[princessi + 1][princessj] == 1:
                PLACED = True
                self.board[princessi][princessj] = PRINCESSCHAR

    def placeMap(self):
        '''Creates a Empty Map i.e. basic framework of stairs and floors'''

        def set(self, i, j):
            self.board[i][j] = WALLCHAR
            self.orign[i][j] = 1

        FLOOR = ROWS - 1
        for i in reversed(xrange(ROWS)):
            set(self, i, 0)
            set(self, i, COLUMNS - 1)

            if i != FLOOR:
                continue
            if FLOOR == 2:
                FLOOR = 0
            else:
                FLOOR = max(FLOOR - 4, 2)

            if i:
                self.floor.append(i)
            if i == 0 or i == ROWS - 1:
                for j in xrange(COLUMNS):
                    set(self, i, j)

            else:
                colX = random.randint(0, COLUMNS / 2 - 1)
                colY = random.randint(COLUMNS / 2, COLUMNS - 1)

                for j in xrange(colX, colY + 1):
                    set(self, i, j)

                if i == 2:
                    set(self, 1, colX)
                    set(self, 1, colY)

                STAIR = True

                while STAIR:
                    stairPos = random.randint(colX, colY - 1)
                    I = i + 1

                    while self.orign[I][stairPos] != 1:
                        I += 1

                    if I - i > 5:
                        continue

                    else:
                        I = i + 1
                        while self.orign[I][stairPos] != 1:
                            self.board[I][stairPos] = STAIRCHAR
                            self.orign[I][stairPos] = 2
                            I += 1

                        STAIR = False

    def placeCoin(self):
        '''Places coin in the map initially'''

        PLACED = False
        while not PLACED:
            Floori = self.floor[random.randint(0, len(self.floor) - 2)]
            Floorj = random.randint(2, COLUMNS - 2)

            if self.board[Floori][Floorj] == WALLCHAR and self.orign[Floori - 1][Floorj] not in [1, 2, 3]:
                self.orign[Floori - 1][Floorj] = 3
                self.board[Floori - 1][Floorj] = COINCHAR
                PLACED = True

    def moveFireball(self, Fireball):
        '''Controls Movement Of Fireball'''

        prevX = Fireball.posX
        prevY = Fireball.posY

        newX = Fireball.posX
        newY = Fireball.posY + Fireball.dir

        rand = random.randint(0, 1)

        if self.checkBlocking(newX, newY) or self.checkFireball(newX, newY):
            if rand:
                Fireball.changeDir()
            return Fireball

        if self.board[newX + 1][newY] == GENERICCHAR:
            while self.board[newX + 1][newY] == GENERICCHAR:
                newX += 1
            if rand:
                Fireball.changeDir()

        if self.board[newX + 1][newY] == WALLCHAR and newX + 2 < ROWS:
            if self.board[newX + 2][newY] == STAIRCHAR:
                newX += 1
                if rand:
                    Fireball.changeDir()
            while self.board[newX + 1][newY] != WALLCHAR:
                newX += 1

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        if newX == ROWS - 2 and newY == 1:
            return None

        if self.checkPlayer(prevX, prevY) or self.checkPlayer(newX, newY):
            self.Player.dies()

        self.board[newX][newY] = FIREBALLCHAR

        Fireball.setPos(newX, newY)
        return Fireball

    def moveFireballs(self, FireballsList):
        ''' Places Fireballs into Map '''
        L = []
        for Fireball in FireballsList:
            new = self.moveFireball(Fireball)
            if new:
                L.append(new)
        return L

    def movePerson(self, person, choice):
        '''Moves a Person according to will'''
        if choice == "w":
            person.moveUp()
        if choice == "s":
            person.moveDown()
        if choice == "a":
            person.moveLeft()
        if choice == "d":
            person.moveRight()

    def moveDonkey(self):
        '''Moves all Donkey according to will'''

        for i in xrange(len(self.Donkey)):
            prevX = self.Donkey[i].posX
            prevY = self.Donkey[i].posY

            k = 0
            PLACED = False
            while not PLACED:
                L = random.randint(-1, 1)
                k += 1
                if k == 3:
                    L = 0
                if self.board[prevX + 1][prevY + L] == WALLCHAR and self.board[prevX][prevY + L] not in [DONKEYCHAR] and not self.checkBlocking(prevX, prevY + L):
                    PLACED = True
                    self.Donkey[i].setPos(prevX, prevY + L)

            self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
            self.board[self.Donkey[i].posX][self.Donkey[i].posY] = DONKEYCHAR

            self.Donkey[i].addTime()
            if self.Donkey[i].times == self.Donkey[i].reset:
                self.Donkey[i].emit(self)

            self.Donkey[i].Fireballs = self.moveFireballs(
                self.Donkey[i].Fireballs)

    def movePlayer(self, jump=0):
        '''Moves a Player according to will'''

        if jump == 2:
            while True:
                prevX = self.Player.posX
                prevY = self.Player.posY

                if self.board[prevX + 1][prevY] in self.abc[1:]:
                    break

                self.Player.setPos(prevX + 1, prevY)
                self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
                self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR
                self.printBoard()
                time.sleep(1)
            return

        prevX = self.Player.posX
        prevY = self.Player.posY

        self.movePerson(self.Player, self.input)

        if self.checkPrincess(self.Player.posX, self.Player.posY):
            b = Board(self.Player.score + 50, self.life, self.level + 1)
            b.play()

        if jump:
            if not self.checkGravity(self.Player.posX, self.Player.posY):
                if self.checkWall(prevX + 1, prevY) and self.input in ["a", "d"]:
                    self.board[prevX][prevY] = self.abc[
                        self.orign[prevX][prevY]]
                    while not self.checkWall(self.Player.posX + 1, self.Player.posY):
                        prevX = self.Player.posX
                        prevY = self.Player.posY
                        self.movePerson(self.Player, "s")
                        self.board[prevX][prevY] = self.abc[
                            self.orign[prevX][prevY]]
                        self.board[self.Player.posX][
                            self.Player.posY] = PLAYERCHAR
                        self.printBoard()
                        time.sleep(0.1)

                else:
                    self.Player.setPos(prevX, prevY)
                    return

        if self.checkBlocking(self.Player.posX, self.Player.posY):
            if not self.checkStair(prevX, prevY):
                self.Player.setPos(prevX, prevY)
                return

        if self.checkDeath(self.Player.posX, self.Player.posY):
            self.Player.dies()
            return

        if self.checkCoin(self.Player.posX, self.Player.posY):
            self.Player.gotCoin()
            self.orign[self.Player.posX][self.Player.posY] = 0

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR

    def printBoard(self):
        ''' Prints the Board'''
        os.system("clear")
        for i in xrange(0, ROWS):
            for j in xrange(0, COLUMNS):
                if (not (i == self.Player.posX and j == self.Player.posY)) and self.board[i][j] == PLAYERCHAR:
                    self.board[i][j] = self.abc[self.orign[i][j]]
                if self.board[i][j] == COINCHAR:
                    print(OKBLUE + self.board[i][j] + ENDC),
                elif self.board[i][j] == WALLCHAR:
                    print(OKGREEN + self.board[i][j] + ENDC),
                elif self.board[i][j] == STAIRCHAR:
                    print(HEADER + self.board[i][j] + ENDC),
                elif self.board[i][j] == FIREBALLCHAR:
                    print(FAIL + self.board[i][j] + ENDC),
                elif self.board[i][j] == PLAYERCHAR:
                    print(WARNING + self.board[i][j] + ENDC),
                elif self.board[i][j] == DONKEYCHAR:
                    print(FAIL + self.board[i][j] + ENDC),
                else:
                    print(self.board[i][j]),
            print

        print "\nCoins Collected :" + str(self.Player.coins)
        print "Score : " + str(self.Player.score)
        print "Lifes : " + str(self.life)
        print "Level : " + str(self.level)
        print "w,a,s,d to move, space followed by a or d to jump in eighter direction, q to quit"

    def empty(self):
        ''' Removes all the Fireballs from the code '''
        for Donkey in self.Donkey:
            Donkey.Fireball = []

    def playerDies(self):
        ''' Protocol to as when the player dies'''
        if self.life == 1:
            os.system("clear")
            print "You Lose"
            sys.exit()

        self.life -= 1

        prevX = self.Player.posX
        prevY = self.Player.posY

        self.Player.setPos(ROWS - 2, 1)

        self.Player.alive = True

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        self.board[ROWS - 2][1] = PLAYERCHAR

        self.printBoard()

    def play(self):
        ''' Driver Function of the Game '''
        self.empty()

        while True:
            self.printBoard()
            self.input = getch()

            if self.input not in VALIDINPUTS:
                continue

            if self.input == "q":
                sys.exit()

            if self.input == " ":
                self.input = getch()
                while self.input not in ["a", "d"]:
                    self.input = getch()
                movement = self.input

                L = ["w", "s"]
                for i in range(4):
                    self.input = L[i / 2]
                    self.moveDonkey()
                    self.movePlayer()
                    self.input = movement
                    self.movePlayer()
                    self.printBoard()
                    time.sleep(0.2)

                self.movePlayer(2)
                self.printBoard()

            else:
                self.moveDonkey()
                self.movePlayer(1)

            if not self.Player.isAlive():
                self.playerDies()

    def setMap(self, COIN=COINCOUNT, score=0):
        ''' Sets the Complete Map, one by one. Orgin if filled on this perticular order:
            0. Generic char (blank space)
            1. Wall
            2. Stair
            3. Coin
        '''
        self.placeMap()

        for i in xrange(self.level * 5):
            x = random.randint(4, ROWS - 2)
            y = random.randint(2, COLUMNS - 2)

            if self.board[x][y] == STAIRCHAR:
                continue

            self.board[x][y] = GENERICCHAR
            self.orign[x][y] = 0

        while COIN:
            self.placeCoin()
            COIN -= 1

        self.placePlayer(score)
        self.placePrincess()

        for i in xrange(self.level):
            self.placeDonkey()

    def __init__(self, score=0, life=3, level=1):
        ''' Initializes the boerd. Place elements on the board. '''
        self.board = [[GENERICCHAR for i in xrange(COLUMNS)]
                      for j in xrange(ROWS)]
        self.orign = [[0 for i in xrange(COLUMNS)] for j in xrange(ROWS)]
        self.floor = []

        self.Donkey = []
        self.Player = None
        self.life = life
        self.level = level
        self.input = ""
        self.abc = [GENERICCHAR, WALLCHAR, STAIRCHAR, COINCHAR]

        self.setMap(COINCOUNT, score)

b = Board()
b.play() (duplicate-code)
R:  1, 0: Similar lines in 2 files
==game:6
==game:6
import random
import sys
import os
import time

try:
    import tty
    import termios
except ImportError:
    try:
        import msvcrt
    except ImportError:
        raise ImportError('getch not available')
    else:
        getch = msvcrt.getch
else:
    def getch():
        '''Input'''
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

        return ch

# Globals
ROWS = 30
COLUMNS = 80
VALIDINPUTS = ["w", "a", "s", "d", "q", " "]
PLAYERCHAR = "P"
DONKEYCHAR = "D"
PRINCESSCHAR = "Q"
WALLCHAR = "X"
FIREBALLCHAR = "O"
COINCHAR = "C"
STAIRCHAR = "H"
COINCOUNT = 20
GENERICCHAR = " "
HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'


from person import Person
from player import Player
from donkey import Donkey
from fireball import Fireball


class Board(object):

    ''' Class for the Actual Board to printed '''

    def checkCoin(self, x, y):
        ''' Checks Coin '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == COINCHAR

    def checkWall(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.orign[x][y] == 1

    def checkDonkey(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == DONKEYCHAR

    def checkStair(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.orign[x][y] == 2

    def checkFireball(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == FIREBALLCHAR

    def checkGravity(self, x, y):
        ''' Checks if it is freefall or not '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False

        if self.checkWall(x + 1, y) or self.checkStair(x, y):
            return True
        elif self.checkWall(x, y) == True and self.checkStair(x + 1, y) == True:
            return True

        return False

    def checkPrincess(self, x, y):
        ''' checks Princess '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == PRINCESSCHAR

    def checkBlocking(self, x, y):
        ''' checks blockage '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return True
        return self.checkWall(x, y) or self.checkDonkey(x, y)

    def checkDeath(self, x, y):
        ''' checks Death '''
        return self.checkFireball(x, y)

    def checkPlayer(self, x, y):
        ''' checks player'''
        return self.Player.posX == x and self.Player.posY == y

    def placePlayer(self, score=0):
        ''' Places Player on the map initially with the score'''

        self.Player = Player(ROWS - 2, 1, score)
        self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR

    def placeDonkey(self):
        ''' Places Donkey on the map initially '''

        donkeyi = self.floor[-2:-1][0] - 1
        donkeyj = 0
        PLACED = False

        while not PLACED:
            donkeyj = random.randint(1, COLUMNS - 1)
            if self.orign[donkeyi][donkeyj] == 0 and self.orign[donkeyi + 1][donkeyj] == 1:
                PLACED = True
                self.board[donkeyi][donkeyj] = DONKEYCHAR
        self.Donkey.append(Donkey(donkeyi, donkeyj))

    def placePrincess(self):
        ''' Places Princess on the map initially '''

        princessi = self.floor[-1:][0] - 1
        princessj = 0
        PLACED = False

        while not PLACED:
            princessj = random.randint(1, COLUMNS - 1)
            if self.orign[princessi][princessj] == 0 and self.orign[princessi + 1][princessj] == 1:
                PLACED = True
                self.board[princessi][princessj] = PRINCESSCHAR

    def placeMap(self):
        '''Creates a Empty Map i.e. basic framework of stairs and floors'''

        def set(self, i, j):
            self.board[i][j] = WALLCHAR
            self.orign[i][j] = 1

        FLOOR = ROWS - 1
        for i in reversed(xrange(ROWS)):
            set(self, i, 0)
            set(self, i, COLUMNS - 1)

            if i != FLOOR:
                continue
            if FLOOR == 2:
                FLOOR = 0
            else:
                FLOOR = max(FLOOR - 4, 2)

            if i:
                self.floor.append(i)
            if i == 0 or i == ROWS - 1:
                for j in xrange(COLUMNS):
                    set(self, i, j)

            else:
                colX = random.randint(0, COLUMNS / 2 - 1)
                colY = random.randint(COLUMNS / 2, COLUMNS - 1)

                for j in xrange(colX, colY + 1):
                    set(self, i, j)

                if i == 2:
                    set(self, 1, colX)
                    set(self, 1, colY)

                STAIR = True

                while STAIR:
                    stairPos = random.randint(colX, colY - 1)
                    I = i + 1

                    while self.orign[I][stairPos] != 1:
                        I += 1

                    if I - i > 5:
                        continue

                    else:
                        I = i + 1
                        while self.orign[I][stairPos] != 1:
                            self.board[I][stairPos] = STAIRCHAR
                            self.orign[I][stairPos] = 2
                            I += 1

                        STAIR = False

    def placeCoin(self):
        '''Places coin in the map initially'''

        PLACED = False
        while not PLACED:
            Floori = self.floor[random.randint(0, len(self.floor) - 2)]
            Floorj = random.randint(2, COLUMNS - 2)

            if self.board[Floori][Floorj] == WALLCHAR and self.orign[Floori - 1][Floorj] not in [1, 2, 3]:
                self.orign[Floori - 1][Floorj] = 3
                self.board[Floori - 1][Floorj] = COINCHAR
                PLACED = True

    def moveFireball(self, Fireball):
        '''Controls Movement Of Fireball'''

        prevX = Fireball.posX
        prevY = Fireball.posY

        newX = Fireball.posX
        newY = Fireball.posY + Fireball.dir

        rand = random.randint(0, 1)

        if self.checkBlocking(newX, newY) or self.checkFireball(newX, newY):
            if rand:
                Fireball.changeDir()
            return Fireball

        if self.board[newX + 1][newY] == GENERICCHAR:
            while self.board[newX + 1][newY] == GENERICCHAR:
                newX += 1
            if rand:
                Fireball.changeDir()

        if self.board[newX + 1][newY] == WALLCHAR and newX + 2 < ROWS:
            if self.board[newX + 2][newY] == STAIRCHAR:
                newX += 1
                if rand:
                    Fireball.changeDir()
            while self.board[newX + 1][newY] != WALLCHAR:
                newX += 1

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        if newX == ROWS - 2 and newY == 1:
            return None

        if self.checkPlayer(prevX, prevY) or self.checkPlayer(newX, newY):
            self.Player.dies()

        self.board[newX][newY] = FIREBALLCHAR

        Fireball.setPos(newX, newY)
        return Fireball

    def moveFireballs(self, FireballsList):
        ''' Places Fireballs into Map '''
        L = []
        for Fireball in FireballsList:
            new = self.moveFireball(Fireball)
            if new:
                L.append(new)
        return L

    def movePerson(self, person, choice):
        '''Moves a Person according to will'''
        if choice == "w":
            person.moveUp()
        if choice == "s":
            person.moveDown()
        if choice == "a":
            person.moveLeft()
        if choice == "d":
            person.moveRight()

    def moveDonkey(self):
        '''Moves all Donkey according to will'''

        for i in xrange(len(self.Donkey)):
            prevX = self.Donkey[i].posX
            prevY = self.Donkey[i].posY

            k = 0
            PLACED = False
            while not PLACED:
                L = random.randint(-1, 1)
                k += 1
                if k == 3:
                    L = 0
                if self.board[prevX + 1][prevY + L] == WALLCHAR and self.board[prevX][prevY + L] not in [DONKEYCHAR] and not self.checkBlocking(prevX, prevY + L):
                    PLACED = True
                    self.Donkey[i].setPos(prevX, prevY + L)

            self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
            self.board[self.Donkey[i].posX][self.Donkey[i].posY] = DONKEYCHAR

            self.Donkey[i].addTime()
            if self.Donkey[i].times == self.Donkey[i].reset:
                self.Donkey[i].emit(self)

            self.Donkey[i].Fireballs = self.moveFireballs(
                self.Donkey[i].Fireballs)

    def movePlayer(self, jump=0):
        '''Moves a Player according to will'''

        if jump == 2:
            while True:
                prevX = self.Player.posX
                prevY = self.Player.posY

                if self.board[prevX + 1][prevY] in self.abc[1:]:
                    break

                self.Player.setPos(prevX + 1, prevY)
                self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
                self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR
                self.printBoard()
                time.sleep(1)
            return

        prevX = self.Player.posX
        prevY = self.Player.posY

        self.movePerson(self.Player, self.input)

        if self.checkPrincess(self.Player.posX, self.Player.posY):
            b = Board(self.Player.score + 50, self.life, self.level + 1)
            b.play()

        if jump:
            if not self.checkGravity(self.Player.posX, self.Player.posY):
                if self.checkWall(prevX + 1, prevY) and self.input in ["a", "d"]:
                    self.board[prevX][prevY] = self.abc[
                        self.orign[prevX][prevY]]
                    while not self.checkWall(self.Player.posX + 1, self.Player.posY):
                        prevX = self.Player.posX
                        prevY = self.Player.posY
                        self.movePerson(self.Player, "s")
                        self.board[prevX][prevY] = self.abc[
                            self.orign[prevX][prevY]]
                        self.board[self.Player.posX][
                            self.Player.posY] = PLAYERCHAR
                        self.printBoard()
                        time.sleep(0.1)

                else:
                    self.Player.setPos(prevX, prevY)
                    return

        if self.checkBlocking(self.Player.posX, self.Player.posY):
            if not self.checkStair(prevX, prevY):
                self.Player.setPos(prevX, prevY)
                return

        if self.checkDeath(self.Player.posX, self.Player.posY):
            self.Player.dies()
            return

        if self.checkCoin(self.Player.posX, self.Player.posY):
            self.Player.gotCoin()
            self.orign[self.Player.posX][self.Player.posY] = 0

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR

    def printBoard(self):
        ''' Prints the Board'''
        os.system("clear")
        for i in xrange(0, ROWS):
            for j in xrange(0, COLUMNS):
                if (not (i == self.Player.posX and j == self.Player.posY)) and self.board[i][j] == PLAYERCHAR:
                    self.board[i][j] = self.abc[self.orign[i][j]]
                if self.board[i][j] == COINCHAR:
                    print(OKBLUE + self.board[i][j] + ENDC),
                elif self.board[i][j] == WALLCHAR:
                    print(OKGREEN + self.board[i][j] + ENDC),
                elif self.board[i][j] == STAIRCHAR:
                    print(HEADER + self.board[i][j] + ENDC),
                elif self.board[i][j] == FIREBALLCHAR:
                    print(FAIL + self.board[i][j] + ENDC),
                elif self.board[i][j] == PLAYERCHAR:
                    print(WARNING + self.board[i][j] + ENDC),
                elif self.board[i][j] == DONKEYCHAR:
                    print(FAIL + self.board[i][j] + ENDC),
                else:
                    print(self.board[i][j]),
            print

        print "\nCoins Collected :" + str(self.Player.coins)
        print "Score : " + str(self.Player.score)
        print "Lifes : " + str(self.life)
        print "Level : " + str(self.level)
        print "w,a,s,d to move, space followed by a or d to jump in eighter direction, q to quit"

    def empty(self):
        ''' Removes all the Fireballs from the code '''
        for Donkey in self.Donkey:
            Donkey.Fireball = []

    def playerDies(self):
        ''' Protocol to as when the player dies'''
        if self.life == 1:
            os.system("clear")
            print "You Lose"
            sys.exit()

        self.life -= 1

        prevX = self.Player.posX
        prevY = self.Player.posY

        self.Player.setPos(ROWS - 2, 1)

        self.Player.alive = True

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        self.board[ROWS - 2][1] = PLAYERCHAR

        self.printBoard()

    def play(self):
        ''' Driver Function of the Game '''
        self.empty()

        while True:
            self.printBoard()
            self.input = getch()

            if self.input not in VALIDINPUTS:
                continue

            if self.input == "q":
                sys.exit()

            if self.input == " ":
                self.input = getch()
                while self.input not in ["a", "d"]:
                    self.input = getch()
                movement = self.input

                L = ["w", "s"]
                for i in range(4):
                    self.input = L[i / 2]
                    self.moveDonkey()
                    self.movePlayer()
                    self.input = movement
                    self.movePlayer()
                    self.printBoard()
                    time.sleep(0.2)

                self.movePlayer(2)
                self.printBoard()

            else:
                self.moveDonkey()
                self.movePlayer(1)

            if not self.Player.isAlive():
                self.playerDies()

    def setMap(self, COIN=COINCOUNT, score=0):
        ''' Sets the Complete Map, one by one. Orgin if filled on this perticular order:
            0. Generic char (blank space)
            1. Wall
            2. Stair
            3. Coin
        '''
        self.placeMap()

        for i in xrange(self.level * 5):
            x = random.randint(4, ROWS - 2)
            y = random.randint(2, COLUMNS - 2)

            if self.board[x][y] == STAIRCHAR:
                continue

            self.board[x][y] = GENERICCHAR
            self.orign[x][y] = 0

        while COIN:
            self.placeCoin()
            COIN -= 1

        self.placePlayer(score)
        self.placePrincess()

        for i in xrange(self.level):
            self.placeDonkey()

    def __init__(self, score=0, life=3, level=1):
        ''' Initializes the boerd. Place elements on the board. '''
        self.board = [[GENERICCHAR for i in xrange(COLUMNS)]
                      for j in xrange(ROWS)]
        self.orign = [[0 for i in xrange(COLUMNS)] for j in xrange(ROWS)]
        self.floor = []

        self.Donkey = []
        self.Player = None
        self.life = life
        self.level = level
        self.input = ""
        self.abc = [GENERICCHAR, WALLCHAR, STAIRCHAR, COINCHAR]

        self.setMap(COINCOUNT, score) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==game:61
==game:61
==main:163
==main:163
class Board(object):

    ''' Class for the Actual Board to printed '''

    def checkCoin(self, x, y):
        ''' Checks Coin '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == COINCHAR

    def checkWall(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.orign[x][y] == 1

    def checkDonkey(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == DONKEYCHAR

    def checkStair(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.orign[x][y] == 2

    def checkFireball(self, x, y):
        ''' Checks Wall '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == FIREBALLCHAR

    def checkGravity(self, x, y):
        ''' Checks if it is freefall or not '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False

        if self.checkWall(x + 1, y) or self.checkStair(x, y):
            return True
        elif self.checkWall(x, y) == True and self.checkStair(x + 1, y) == True:
            return True

        return False

    def checkPrincess(self, x, y):
        ''' checks Princess '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return False
        return self.board[x][y] == PRINCESSCHAR

    def checkBlocking(self, x, y):
        ''' checks blockage '''
        if x >= ROWS or y >= COLUMNS or x < 0 or y < 0:
            return True
        return self.checkWall(x, y) or self.checkDonkey(x, y)

    def checkDeath(self, x, y):
        ''' checks Death '''
        return self.checkFireball(x, y)

    def checkPlayer(self, x, y):
        ''' checks player'''
        return self.Player.posX == x and self.Player.posY == y

    def placePlayer(self, score=0):
        ''' Places Player on the map initially with the score'''

        self.Player = Player(ROWS - 2, 1, score)
        self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR

    def placeDonkey(self):
        ''' Places Donkey on the map initially '''

        donkeyi = self.floor[-2:-1][0] - 1
        donkeyj = 0
        PLACED = False

        while not PLACED:
            donkeyj = random.randint(1, COLUMNS - 1)
            if self.orign[donkeyi][donkeyj] == 0 and self.orign[donkeyi + 1][donkeyj] == 1:
                PLACED = True
                self.board[donkeyi][donkeyj] = DONKEYCHAR
        self.Donkey.append(Donkey(donkeyi, donkeyj))

    def placePrincess(self):
        ''' Places Princess on the map initially '''

        princessi = self.floor[-1:][0] - 1
        princessj = 0
        PLACED = False

        while not PLACED:
            princessj = random.randint(1, COLUMNS - 1)
            if self.orign[princessi][princessj] == 0 and self.orign[princessi + 1][princessj] == 1:
                PLACED = True
                self.board[princessi][princessj] = PRINCESSCHAR

    def placeMap(self):
        '''Creates a Empty Map i.e. basic framework of stairs and floors'''

        def set(self, i, j):
            self.board[i][j] = WALLCHAR
            self.orign[i][j] = 1

        FLOOR = ROWS - 1
        for i in reversed(xrange(ROWS)):
            set(self, i, 0)
            set(self, i, COLUMNS - 1)

            if i != FLOOR:
                continue
            if FLOOR == 2:
                FLOOR = 0
            else:
                FLOOR = max(FLOOR - 4, 2)

            if i:
                self.floor.append(i)
            if i == 0 or i == ROWS - 1:
                for j in xrange(COLUMNS):
                    set(self, i, j)

            else:
                colX = random.randint(0, COLUMNS / 2 - 1)
                colY = random.randint(COLUMNS / 2, COLUMNS - 1)

                for j in xrange(colX, colY + 1):
                    set(self, i, j)

                if i == 2:
                    set(self, 1, colX)
                    set(self, 1, colY)

                STAIR = True

                while STAIR:
                    stairPos = random.randint(colX, colY - 1)
                    I = i + 1

                    while self.orign[I][stairPos] != 1:
                        I += 1

                    if I - i > 5:
                        continue

                    else:
                        I = i + 1
                        while self.orign[I][stairPos] != 1:
                            self.board[I][stairPos] = STAIRCHAR
                            self.orign[I][stairPos] = 2
                            I += 1

                        STAIR = False

    def placeCoin(self):
        '''Places coin in the map initially'''

        PLACED = False
        while not PLACED:
            Floori = self.floor[random.randint(0, len(self.floor) - 2)]
            Floorj = random.randint(2, COLUMNS - 2)

            if self.board[Floori][Floorj] == WALLCHAR and self.orign[Floori - 1][Floorj] not in [1, 2, 3]:
                self.orign[Floori - 1][Floorj] = 3
                self.board[Floori - 1][Floorj] = COINCHAR
                PLACED = True

    def moveFireball(self, Fireball):
        '''Controls Movement Of Fireball'''

        prevX = Fireball.posX
        prevY = Fireball.posY

        newX = Fireball.posX
        newY = Fireball.posY + Fireball.dir

        rand = random.randint(0, 1)

        if self.checkBlocking(newX, newY) or self.checkFireball(newX, newY):
            if rand:
                Fireball.changeDir()
            return Fireball

        if self.board[newX + 1][newY] == GENERICCHAR:
            while self.board[newX + 1][newY] == GENERICCHAR:
                newX += 1
            if rand:
                Fireball.changeDir()

        if self.board[newX + 1][newY] == WALLCHAR and newX + 2 < ROWS:
            if self.board[newX + 2][newY] == STAIRCHAR:
                newX += 1
                if rand:
                    Fireball.changeDir()
            while self.board[newX + 1][newY] != WALLCHAR:
                newX += 1

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        if newX == ROWS - 2 and newY == 1:
            return None

        if self.checkPlayer(prevX, prevY) or self.checkPlayer(newX, newY):
            self.Player.dies()

        self.board[newX][newY] = FIREBALLCHAR

        Fireball.setPos(newX, newY)
        return Fireball

    def moveFireballs(self, FireballsList):
        ''' Places Fireballs into Map '''
        L = []
        for Fireball in FireballsList:
            new = self.moveFireball(Fireball)
            if new:
                L.append(new)
        return L

    def movePerson(self, person, choice):
        '''Moves a Person according to will'''
        if choice == "w":
            person.moveUp()
        if choice == "s":
            person.moveDown()
        if choice == "a":
            person.moveLeft()
        if choice == "d":
            person.moveRight()

    def moveDonkey(self):
        '''Moves all Donkey according to will'''

        for i in xrange(len(self.Donkey)):
            prevX = self.Donkey[i].posX
            prevY = self.Donkey[i].posY

            k = 0
            PLACED = False
            while not PLACED:
                L = random.randint(-1, 1)
                k += 1
                if k == 3:
                    L = 0
                if self.board[prevX + 1][prevY + L] == WALLCHAR and self.board[prevX][prevY + L] not in [DONKEYCHAR] and not self.checkBlocking(prevX, prevY + L):
                    PLACED = True
                    self.Donkey[i].setPos(prevX, prevY + L)

            self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
            self.board[self.Donkey[i].posX][self.Donkey[i].posY] = DONKEYCHAR

            self.Donkey[i].addTime()
            if self.Donkey[i].times == self.Donkey[i].reset:
                self.Donkey[i].emit(self)

            self.Donkey[i].Fireballs = self.moveFireballs(
                self.Donkey[i].Fireballs)

    def movePlayer(self, jump=0):
        '''Moves a Player according to will'''

        if jump == 2:
            while True:
                prevX = self.Player.posX
                prevY = self.Player.posY

                if self.board[prevX + 1][prevY] in self.abc[1:]:
                    break

                self.Player.setPos(prevX + 1, prevY)
                self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
                self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR
                self.printBoard()
                time.sleep(1)
            return

        prevX = self.Player.posX
        prevY = self.Player.posY

        self.movePerson(self.Player, self.input)

        if self.checkPrincess(self.Player.posX, self.Player.posY):
            b = Board(self.Player.score + 50, self.life, self.level + 1)
            b.play()

        if jump:
            if not self.checkGravity(self.Player.posX, self.Player.posY):
                if self.checkWall(prevX + 1, prevY) and self.input in ["a", "d"]:
                    self.board[prevX][prevY] = self.abc[
                        self.orign[prevX][prevY]]
                    while not self.checkWall(self.Player.posX + 1, self.Player.posY):
                        prevX = self.Player.posX
                        prevY = self.Player.posY
                        self.movePerson(self.Player, "s")
                        self.board[prevX][prevY] = self.abc[
                            self.orign[prevX][prevY]]
                        self.board[self.Player.posX][
                            self.Player.posY] = PLAYERCHAR
                        self.printBoard()
                        time.sleep(0.1)

                else:
                    self.Player.setPos(prevX, prevY)
                    return

        if self.checkBlocking(self.Player.posX, self.Player.posY):
            if not self.checkStair(prevX, prevY):
                self.Player.setPos(prevX, prevY)
                return

        if self.checkDeath(self.Player.posX, self.Player.posY):
            self.Player.dies()
            return

        if self.checkCoin(self.Player.posX, self.Player.posY):
            self.Player.gotCoin()
            self.orign[self.Player.posX][self.Player.posY] = 0

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        self.board[self.Player.posX][self.Player.posY] = PLAYERCHAR

    def printBoard(self):
        ''' Prints the Board'''
        os.system("clear")
        for i in xrange(0, ROWS):
            for j in xrange(0, COLUMNS):
                if (not (i == self.Player.posX and j == self.Player.posY)) and self.board[i][j] == PLAYERCHAR:
                    self.board[i][j] = self.abc[self.orign[i][j]]
                if self.board[i][j] == COINCHAR:
                    print(OKBLUE + self.board[i][j] + ENDC),
                elif self.board[i][j] == WALLCHAR:
                    print(OKGREEN + self.board[i][j] + ENDC),
                elif self.board[i][j] == STAIRCHAR:
                    print(HEADER + self.board[i][j] + ENDC),
                elif self.board[i][j] == FIREBALLCHAR:
                    print(FAIL + self.board[i][j] + ENDC),
                elif self.board[i][j] == PLAYERCHAR:
                    print(WARNING + self.board[i][j] + ENDC),
                elif self.board[i][j] == DONKEYCHAR:
                    print(FAIL + self.board[i][j] + ENDC),
                else:
                    print(self.board[i][j]),
            print

        print "\nCoins Collected :" + str(self.Player.coins)
        print "Score : " + str(self.Player.score)
        print "Lifes : " + str(self.life)
        print "Level : " + str(self.level)
        print "w,a,s,d to move, space followed by a or d to jump in eighter direction, q to quit"

    def empty(self):
        ''' Removes all the Fireballs from the code '''
        for Donkey in self.Donkey:
            Donkey.Fireball = []

    def playerDies(self):
        ''' Protocol to as when the player dies'''
        if self.life == 1:
            os.system("clear")
            print "You Lose"
            sys.exit()

        self.life -= 1

        prevX = self.Player.posX
        prevY = self.Player.posY

        self.Player.setPos(ROWS - 2, 1)

        self.Player.alive = True

        self.board[prevX][prevY] = self.abc[self.orign[prevX][prevY]]
        self.board[ROWS - 2][1] = PLAYERCHAR

        self.printBoard()

    def play(self):
        ''' Driver Function of the Game '''
        self.empty()

        while True:
            self.printBoard()
            self.input = getch()

            if self.input not in VALIDINPUTS:
                continue

            if self.input == "q":
                sys.exit()

            if self.input == " ":
                self.input = getch()
                while self.input not in ["a", "d"]:
                    self.input = getch()
                movement = self.input

                L = ["w", "s"]
                for i in range(4):
                    self.input = L[i / 2]
                    self.moveDonkey()
                    self.movePlayer()
                    self.input = movement
                    self.movePlayer()
                    self.printBoard()
                    time.sleep(0.2)

                self.movePlayer(2)
                self.printBoard()

            else:
                self.moveDonkey()
                self.movePlayer(1)

            if not self.Player.isAlive():
                self.playerDies()

    def setMap(self, COIN=COINCOUNT, score=0):
        ''' Sets the Complete Map, one by one. Orgin if filled on this perticular order:
            0. Generic char (blank space)
            1. Wall
            2. Stair
            3. Coin
        '''
        self.placeMap()

        for i in xrange(self.level * 5):
            x = random.randint(4, ROWS - 2)
            y = random.randint(2, COLUMNS - 2)

            if self.board[x][y] == STAIRCHAR:
                continue

            self.board[x][y] = GENERICCHAR
            self.orign[x][y] = 0

        while COIN:
            self.placeCoin()
            COIN -= 1

        self.placePlayer(score)
        self.placePrincess()

        for i in xrange(self.level):
            self.placeDonkey()

    def __init__(self, score=0, life=3, level=1):
        ''' Initializes the boerd. Place elements on the board. '''
        self.board = [[GENERICCHAR for i in xrange(COLUMNS)]
                      for j in xrange(ROWS)]
        self.orign = [[0 for i in xrange(COLUMNS)] for j in xrange(ROWS)]
        self.floor = []

        self.Donkey = []
        self.Player = None
        self.life = life
        self.level = level
        self.input = ""
        self.abc = [GENERICCHAR, WALLCHAR, STAIRCHAR, COINCHAR]

        self.setMap(COINCOUNT, score) (duplicate-code)
R:  1, 0: Similar lines in 4 files
==game:6
==game:6
==main:2
==main:2
import random
import sys
import os
import time

try:
    import tty
    import termios
except ImportError:
    try:
        import msvcrt
    except ImportError:
        raise ImportError('getch not available')
    else:
        getch = msvcrt.getch
else:
    def getch():
        '''Input'''
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

        return ch

# Globals
ROWS = 30
COLUMNS = 80
VALIDINPUTS = ["w", "a", "s", "d", "q", " "]
PLAYERCHAR = "P"
DONKEYCHAR = "D"
PRINCESSCHAR = "Q"
WALLCHAR = "X"
FIREBALLCHAR = "O"
COINCHAR = "C"
STAIRCHAR = "H"
COINCOUNT = 20
GENERICCHAR = " "
HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'

 (duplicate-code)
R:  1, 0: Similar lines in 2 files
==donkey:1
==donkey:1
from person import Person
from fireball import Fireball
import random


class Donkey(Person):

    '''Donkey present in the Game '''

    def emit(self):
        '''Protocol to emit a new FireBall'''
        Direction = random.randint(0, 1)
        fireball = Fireball(self.posX, self.posY, 1 - 2 * Direction)

        self.Fireballs.append(fireball)
        self.times = 0

    def times(self):
        '''Times of movement after last fireball was fired'''
        return self.times

    def reset(self):
        '''Reset value of firing of fireball'''
        return self.reset

    def addTime(self):
        '''Add one to time'''
        self.times += 1

    def __init__(self, x, y, times=0, reset=15, Fireballs=[]):
        Person.__init__(self, x, y)

        self.Fireballs = Fireballs
        self.times = times
        self.reset = reset (duplicate-code)
R:  1, 0: Similar lines in 4 files
==main:51
==main:51
==person:3
==person:3
class Person(object):

    """ Definition of a Person in the Game."""

    def __init__(self, x, y):
        self.posX = x
        self.posY = y

    def moveUp(self):
        '''Move Person Up'''
        self.posX = (self.posX - 1)

    def moveDown(self):
        '''Move Person Down'''
        self.posX = (self.posX + 1)

    def moveLeft(self):
        '''Move Person Left'''
        self.posY = (self.posY - 1)

    def moveRight(self):
        '''Move Person Down'''
        self.posY = (self.posY + 1)

    def setPos(self, x, y):
        '''Set Position of a person'''
        self.posX = x
        self.posY = y

    def getPosition(self):
        '''Get Position of the person'''
        return [self.x, self.y] (duplicate-code)
R:  1, 0: Similar lines in 2 files
==player:1
==player:1
from person import Person


class Player(Person):

    ''' Player present in the game '''

    def __init__(self, x, y, score=0, life=3):
        '''Initialise The Player'''
        Person.__init__(self, x, y)
        self.coins = 0
        self.life = life
        self.score = score
        self.alive = True

    def dies(self):
        '''Protocol of when the Player Dies'''
        self.alive = False
        self.score -= 25

    def isAlive(self):
        '''Function To check if player is alive'''
        return self.alive

    def gotCoin(self):
        '''Protocol of when The Player gets a coin'''
        self.coins += 1
        self.score += 5 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==main:85
==main:85
==player:4
==player:4
class Player(Person):

    ''' Player present in the game '''

    def __init__(self, x, y, score=0, life=3):
        '''Initialise The Player'''
        Person.__init__(self, x, y)
        self.coins = 0
        self.life = life
        self.score = score
        self.alive = True

    def dies(self):
        '''Protocol of when the Player Dies'''
        self.alive = False
        self.score -= 25

    def isAlive(self):
        '''Function To check if player is alive'''
        return self.alive

    def gotCoin(self):
        '''Protocol of when The Player gets a coin'''
        self.coins += 1
        self.score += 5 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==donkey:12
==donkey:12
==main:118
==main:118
        Direction = random.randint(0, 1)
        fireball = Fireball(self.posX, self.posY, 1 - 2 * Direction)

        self.Fireballs.append(fireball)
        self.times = 0

    def times(self):
        '''Times of movement after last fireball was fired'''
        return self.times

    def reset(self):
        '''Reset value of firing of fireball'''
        return self.reset

    def addTime(self):
        '''Add one to time'''
        self.times += 1

    def __init__(self, x, y, times=0, reset=15, Fireballs=[]):
        Person.__init__(self, x, y)

        self.Fireballs = Fireballs
        self.times = times
        self.reset = reset (duplicate-code)
R:  1, 0: Similar lines in 2 files
==fireball:1
==fireball:1
from person import Person


class Fireball():

    '''Fireballs emmited by donkey'''

    def __init__(self, x, y, dir):
        self.posX = x
        self.posY = y
        self.dir = dir

    def setPos(self, X, Y):
        '''Set Position of Fireball'''
        self.posX = X
        self.posY = Y

    def changeDir(self):
        '''Change Direction of movement of Fireball'''
        self.dir *= -1 (duplicate-code)
R:  1, 0: Similar lines in 4 files
==fireball:4
==fireball:4
==main:144
==main:144
class Fireball():

    '''Fireballs emmited by donkey'''

    def __init__(self, x, y, dir):
        self.posX = x
        self.posY = y
        self.dir = dir

    def setPos(self, X, Y):
        '''Set Position of Fireball'''
        self.posX = X
        self.posY = Y

    def changeDir(self):
        '''Change Direction of movement of Fireball'''
        self.dir *= -1 (duplicate-code)


Report
======
1694 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |13     |13         |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |20     |20         |=          |100.00      |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|method   |180    |180        |=          |100.00      |75.56    |
+---------+-------+-----------+-----------+------------+---------+
|function |8      |8          |=          |50.00       |0.00     |
+---------+-------+-----------+-----------+------------+---------+



External dependencies
---------------------
::

    donkey (game)
    fireball (donkey,game)
    game (donkeykong)
    person (player,donkey,fireball,game)
    player (game)



Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |1727   |84.74 |1707     |+20.00     |
+----------+-------+------+---------+-----------+
|docstring |253    |12.41 |253      |=          |
+----------+-------+------+---------+-----------+
|comment   |4      |0.20  |4        |=          |
+----------+-------+------+---------+-----------+
|empty     |54     |2.65  |34       |+20.00     |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+--------+---------+-----------+
|                         |now     |previous |difference |
+=========================+========+=========+===========+
|nb duplicated lines      |3048    |2977     |+71.00     |
+-------------------------+--------+---------+-----------+
|percent duplicated lines |119.764 |120.380  |-0.62      |
+-------------------------+--------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |511    |525      |-14.00     |
+-----------+-------+---------+-----------+
|refactor   |41     |42       |-1.00      |
+-----------+-------+---------+-----------+
|warning    |46     |46       |=          |
+-----------+-------+---------+-----------+
|error      |18     |18       |=          |
+-----------+-------+---------+-----------+



% errors / warnings by module
-----------------------------

+-----------+------+--------+---------+-----------+
|module     |error |warning |refactor |convention |
+===========+======+========+=========+===========+
|main       |22.22 |23.91   |21.95    |25.05      |
+-----------+------+--------+---------+-----------+
|donkey     |11.11 |2.17    |2.44     |0.59       |
+-----------+------+--------+---------+-----------+
|person     |11.11 |0.00    |0.00     |1.96       |
+-----------+------+--------+---------+-----------+
|README     |5.56  |0.00    |26.83    |0.00       |
+-----------+------+--------+---------+-----------+
|output     |5.56  |0.00    |0.00     |0.00       |
+-----------+------+--------+---------+-----------+
|game       |0.00  |19.57   |19.51    |20.16      |
+-----------+------+--------+---------+-----------+
|fireball   |0.00  |4.35    |0.00     |1.76       |
+-----------+------+--------+---------+-----------+
|player     |0.00  |0.00    |0.00     |0.39       |
+-----------+------+--------+---------+-----------+
|donkeykong |0.00  |0.00    |0.00     |0.20       |
+-----------+------+--------+---------+-----------+



Messages
--------

+-----------------------------+------------+
|message id                   |occurrences |
+=============================+============+
|invalid-name                 |491         |
+-----------------------------+------------+
|too-many-branches            |14          |
+-----------------------------+------------+
|redefined-outer-name         |14          |
+-----------------------------+------------+
|unused-variable              |12          |
+-----------------------------+------------+
|line-too-long                |12          |
+-----------------------------+------------+
|duplicate-code               |11          |
+-----------------------------+------------+
|redefined-builtin            |8           |
+-----------------------------+------------+
|no-member                    |8           |
+-----------------------------+------------+
|method-hidden                |8           |
+-----------------------------+------------+
|unused-import                |6           |
+-----------------------------+------------+
|too-many-public-methods      |4           |
+-----------------------------+------------+
|too-many-instance-attributes |4           |
+-----------------------------+------------+
|too-many-arguments           |4           |
+-----------------------------+------------+
|old-style-class              |4           |
+-----------------------------+------------+
|no-self-use                  |4           |
+-----------------------------+------------+
|missing-docstring            |4           |
+-----------------------------+------------+
|dangerous-default-value      |4           |
+-----------------------------+------------+
|unused-argument              |2           |
+-----------------------------+------------+
|syntax-error                 |2           |
+-----------------------------+------------+
|parse-error                  |1           |
+-----------------------------+------------+



Global evaluation
-----------------
Your code has been rated at 5.94/10 (previous run: 5.85/10, +0.09)

